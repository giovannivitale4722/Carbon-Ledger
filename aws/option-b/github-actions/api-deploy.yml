name: Deploy API to ECS

on:
  push:
    branches:
      - main
    paths:
      - 'apps/api/**'
      - 'packages/**'
      - '.github/workflows/api-deploy.yml'

env:
  AWS_REGION: us-east-1
  ECR_REPOSITORY: carbon-ledger-api
  COPILOT_APP: carbon-ledger
  COPILOT_ENV: prod
  COPILOT_SVC: api

jobs:
  deploy:
    name: Deploy API
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: apps/api/Dockerfile
          push: true
          tags: |
            ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${{ github.sha }}
            ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Install Copilot CLI
        run: |
          curl -Lo copilot https://github.com/aws/copilot-cli/releases/latest/download/copilot-linux
          chmod +x copilot
          sudo mv copilot /usr/local/bin/copilot

      - name: Deploy to ECS via Copilot
        run: |
          copilot svc deploy \
            --name ${{ env.COPILOT_SVC }} \
            --env ${{ env.COPILOT_ENV }} \
            --tag ${{ github.sha }}

      - name: Run database migrations
        run: |
          TASK_ARN=$(copilot svc show --name ${{ env.COPILOT_SVC }} --env ${{ env.COPILOT_ENV }} --json | jq -r '.tasks[0].id')
          aws ecs execute-command \
            --cluster ${{ env.COPILOT_APP }}-${{ env.COPILOT_ENV }}-Cluster \
            --task $TASK_ARN \
            --container ${{ env.COPILOT_SVC }} \
            --interactive \
            --command "pnpm --filter @carbon-ledger/api prisma migrate deploy"

      - name: Deployment notification
        if: success()
        run: |
          echo "API deployed successfully!"
          copilot svc show --name ${{ env.COPILOT_SVC }} --env ${{ env.COPILOT_ENV }}

