generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  password  String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  accounts        Account[]
  budgets         Budget[]
  recommendations Recommendation[]

  @@map("users")
}

model Account {
  id           String    @id @default(cuid())
  userId       String
  externalId   String
  bankName     String
  accountType  String    @default("checking")
  lastSyncedAt DateTime?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  user         User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  transactions Transaction[]

  @@index([userId])
  @@map("accounts")
}

model Merchant {
  id        String   @id @default(cuid())
  name      String
  mcc       String?
  category  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  transactions Transaction[]

  @@index([mcc])
  @@map("merchants")
}

model Transaction {
  id             String   @id @default(cuid())
  accountId      String
  merchantId     String?
  externalId     String?
  date           DateTime
  amountUSD      Float
  currency       String   @default("USD")
  rawDescription String
  mcc            String?
  category       String
  tags           String[] @default([])
  metadata       Json     @default("{}")
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  account          Account            @relation(fields: [accountId], references: [id], onDelete: Cascade)
  merchant         Merchant?          @relation(fields: [merchantId], references: [id])
  emissionEstimate EmissionEstimate?

  @@index([accountId, date])
  @@index([category])
  @@map("transactions")
}

enum EmissionMethod {
  ACTIVITY
  INTENSITY
}

model EmissionFactor {
  id             String   @id @default(cuid())
  source         String
  scope          String
  unitType       String
  unit           String
  kgCO2ePerUnit  Float
  categoryKey    String
  notes          String?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  emissionEstimates EmissionEstimate[]

  @@index([categoryKey])
  @@map("emission_factors")
}

model EmissionEstimate {
  id            String          @id @default(cuid())
  transactionId String          @unique
  method        EmissionMethod
  kgCO2e        Float
  factorId      String?
  details       Json            @default("{}")
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt

  transaction Transaction      @relation(fields: [transactionId], references: [id], onDelete: Cascade)
  factor      EmissionFactor?  @relation(fields: [factorId], references: [id])

  @@index([transactionId])
  @@map("emission_estimates")
}

model Budget {
  id        String   @id @default(cuid())
  userId    String
  month     String // YYYY-MM format
  limitKg   Float
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, month])
  @@index([userId, month])
  @@map("budgets")
}

model Recommendation {
  id              String   @id @default(cuid())
  userId          String
  month           String
  title           String
  description     String
  estReductionKg  Float
  accepted        Boolean  @default(false)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, month])
  @@map("recommendations")
}

